data_dir: /vector-data-dir

api:
  enabled: true
  address: 0.0.0.0:8686

enrichment_tables:
  geoip_table:
    type: geoip
    path: /usr/share/GeoIP/GeoLite2-City.mmdb

# Sources
sources:
  kubernetes_logs:
    address: 0.0.0.0:6000
    type: vector
    version: "2"

  talos_kernel_logs:
    address: 0.0.0.0:6001
    type: socket
    mode: udp
    max_length: 102400
    decoding:
      codec: json
    host_key: __host

  talos_service_logs:
    address: 0.0.0.0:6002
    type: socket
    mode: udp
    max_length: 102400
    decoding:
      codec: json
    host_key: __host

  vyos_syslog:
    type: syslog
    mode: tcp
    address: 0.0.0.0:6003

  journald_source:
    type: vector
    address: 0.0.0.0:6004
    version: "2"

# Transformations
transforms:
  kubernetes_remap:
    type: remap
    inputs:
      - kubernetes_logs
    source: |
      # Standardize 'app' index
      .custom_app_name = .pod_labels."app.kubernetes.io/name" || .pod_labels.app || .pod_labels."k8s-app" || "unknown"
      # Drop pod_labels
      del(.pod_labels)

  kernel_hostname_transform:
    type: remap
    inputs: ["talos_kernel_logs"]
    source: |-
      r1 = replace!(.__host, "172.16.11.10", "k8s-m0")
      r2 = replace(r1, "172.16.11.11", "k8s-m1")
      r3 = replace(r2, "172.16.11.12", "k8s-m2")
      r4 = replace(r3, "172.16.11.13", "k8s-w0")
      r5 = replace(r4, "172.16.11.14", "k8s-w1")
      r6 = replace(r5, "172.16.11.15", "k8s-w2")
      r7 = replace(r6, "172.16.11.16", "k8s-w3")
      .node = r7

  service_hostname_transform:
    type: remap
    inputs: ["talos_service_logs"]
    source: |-
      r1 = replace!(.__host, "172.16.11.10", "k8s-m0")
      r2 = replace(r1, "172.16.11.11", "k8s-m1")
      r3 = replace(r2, "172.16.11.12", "k8s-m2")
      r4 = replace(r3, "172.16.11.13", "k8s-w0")
      r5 = replace(r4, "172.16.11.14", "k8s-w1")
      r6 = replace(r5, "172.16.11.15", "k8s-w2")
      r7 = replace(r6, "172.16.11.16", "k8s-w3")
      .node = r7

  # [63950.153039] [wan-local-default-D]IN=eth4 OUT= MAC=xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx SRC=xxx.xxx.xxx.xxx DST=xxx.xxx.xxx.xxx LEN=40 TOS=0x00 PREC=0x00 TTL=240 ID=60610 PROTO=TCP SPT=53451 DPT=2002 WINDOW=1024 RES=0x00 SYN URGP=0
  # [253935.693502] [ipv4-CONTAINERS-INFRA-default-R]IN=pod-containers OUT=bond0.1611 PHYSIN=veth3 MAC=ca:e4:f1:46:ff:58:d6:53:ce:8a:f1:a7:08:00 SRC=172.16.16.4 DST=172.16.11.16 LEN=1503 TOS=0x00 PREC=0x00 TTL=63 ID=4585 DF PROTO=TCP SPT=6443 DPT=55932 WINDOW=2362 RES=0x00 ACK PSH URGP=0
  vyos_firewall_route:
    type: route
    inputs:
      - vyos_syslog
    route:
      firewall: |
        .facility == "kern" && match!(.message, r'^\[(.*?)\].(.*)')

  vyos_firewall_remap:
    type: remap
    inputs:
      - vyos_firewall_route.firewall
    source: |
      # Parse firewall rule message
      split_message, split_err = parse_regex(.message, r'^\[.*\].\[(?P<rule>.*?)\](?P<fields>.*)')
      if split_err != null {
          abort
      }
      # Extract separate fields from message
      split_message.fields, split_err = strip_whitespace(split_message.fields)
      if split_err != null {
          abort
      }
      .message, parse_err = parse_key_value(split_message.fields, whitespace: "strict")
      if parse_err != null {
          abort
      }
      # Add more information about the triggered rule
      .message.RULE, parse_err = parse_regex(split_message.rule, r'^(?P<type>\w+)-(?P<from_zone>\w+)-(?P<to_zone>\w+)-(?P<id>\w+)-(?P<action>\w+)$')
      if parse_err != null {
          abort
      }

  vyos_firewall_wan_route:
    type: route
    inputs:
      - vyos_firewall_remap
    route:
      from_wan: .message.RULE.from_zone == "WAN"

  vyos_firewall_geoip_remap:
    type: remap
    inputs:
      - vyos_firewall_wan_route.from_wan
    source: |
      .geoip = get_enrichment_table_record!(
          "geoip_table", {
              "ip": .message.SRC
          }
      )

# Sinks
sinks:
  loki_kubernetes:
    type: loki
    inputs:
      - kubernetes_remap
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding:
      codec: json
    batch:
      max_bytes: 2049000
    out_of_order_action: rewrite_timestamp
    remove_label_fields: true
    remove_timestamp: true
    labels:
      app: "{{ custom_app_name }}"
      namespace: "{{ kubernetes.pod_namespace }}"
      node: "{{ kubernetes.pod_node_name }}"

  talos_kernel:
    type: loki
    inputs: ["kernel_hostname_transform"]
    endpoint: http://loki-gateway.monitor.svc.cluster.local
    encoding:
      codec: json
      except_fields: ["__host"]
    batch:
      max_bytes: 2049000
    out_of_order_action: rewrite_timestamp
    labels:
      node: "{{ node }}"
      facility: "{{ facility }}"
      cluster: "cluster-0"
      namespace: "talos:kernel"

  talos_service:
    type: loki
    inputs: ["service_hostname_transform"]
    endpoint: http://loki-gateway.monitor.svc.cluster.local
    encoding:
      codec: json
      except_fields: ["__host"]
    batch:
      max_bytes: 2049000
    out_of_order_action: rewrite_timestamp
    labels:
      node: "{{ node }}"
      talos_service: '{{ "talos-service" }}'
      cluster: "cluster-0"
      namespace: "talos:service"

  loki_vyos:
    type: loki
    inputs:
      - vyos_firewall_wan_route._unmatched
      - vyos_firewall_geoip_remap
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding:
      codec: json
    out_of_order_action: rewrite_timestamp
    labels:
      hostname: "{{ host }}"

  loki_journal:
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding:
      codec: json
    inputs:
      - journald_source
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      hostname: "{{ host }}"
